# Generated by Django 5.2.5 on 2025-08-25 18:40

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_id', models.CharField(max_length=100, unique=True, verbose_name='ID da Sessão')),
                ('questions_used', models.PositiveIntegerField(default=0, verbose_name='Perguntas Usadas')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True, verbose_name='Endereço IP')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('last_activity', models.DateTimeField(auto_now=True, verbose_name='Última Atividade')),
            ],
            options={
                'verbose_name': 'Sessão de Usuário',
                'verbose_name_plural': 'Sessões de Usuário',
                'ordering': ['-last_activity'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(help_text='E-mail único do usuário (usado para login)', max_length=254, unique=True, verbose_name='E-mail')),
                ('whatsapp', models.CharField(help_text='Número do WhatsApp com formato (11) 99999-9999', max_length=15, verbose_name='WhatsApp')),
                ('email_confirmed', models.BooleanField(default=False, help_text='Se o usuário confirmou seu e-mail', verbose_name='E-mail Confirmado')),
                ('email_confirmation_token', models.UUIDField(default=uuid.uuid4, help_text='Token único para confirmação de e-mail', unique=True, verbose_name='Token de Confirmação')),
                ('email_confirmation_sent_at', models.DateTimeField(blank=True, help_text='Quando o e-mail de confirmação foi enviado', null=True, verbose_name='E-mail de Confirmação Enviado')),
                ('luca_questions_used', models.PositiveIntegerField(default=0, help_text='Número de perguntas já feitas no período atual', verbose_name='Perguntas Usadas (Luca IA)')),
                ('luca_last_reset', models.DateTimeField(default=django.utils.timezone.now, help_text='Data do último reset do contador de perguntas', verbose_name='Último Reset (Luca IA)')),
                ('user_type', models.CharField(choices=[('anonymous', 'Anônimo'), ('registered', 'Cadastrado'), ('subscriber', 'Assinante')], default='registered', help_text='Tipo de usuário para controle de permissões', max_length=20, verbose_name='Tipo de Usuário')),
                ('registration_method', models.CharField(choices=[('email', 'E-mail'), ('google', 'Google'), ('facebook', 'Facebook')], default='email', help_text='Como o usuário se cadastrou no sistema', max_length=20, verbose_name='Método de Cadastro')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Atualizado em')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Usuário',
                'verbose_name_plural': 'Usuários',
                'db_table': 'auth_user_custom',
                'ordering': ['-created_at'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='LucaQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.TextField(help_text='Pergunta feita pelo usuário', verbose_name='Pergunta')),
                ('answer', models.TextField(blank=True, help_text='Resposta da IA', verbose_name='Resposta')),
                ('session_id', models.CharField(blank=True, help_text='ID da sessão para usuários anônimos', max_length=100, verbose_name='ID da Sessão')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True, verbose_name='Endereço IP')),
                ('user_agent', models.TextField(blank=True, verbose_name='User Agent')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('response_time', models.DecimalField(blank=True, decimal_places=3, help_text='Tempo de resposta em segundos', max_digits=8, null=True, verbose_name='Tempo de Resposta (s)')),
                ('user', models.ForeignKey(blank=True, help_text='Usuário que fez a pergunta (pode ser nulo para anônimos)', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Usuário')),
            ],
            options={
                'verbose_name': 'Pergunta Luca IA',
                'verbose_name_plural': 'Perguntas Luca IA',
                'ordering': ['-created_at'],
            },
        ),
    ]
